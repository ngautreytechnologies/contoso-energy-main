{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Contoso Energy - Serverless Event-Driven Architecture",
    "summary": "An enterprise-grade event-driven platform for processing and enriching energy telemetry data using AWS serverless services and ML pipelines.",
    "problem": "Energy providers face challenges ingesting high-volume telemetry from distributed devices, enriching it with AI insights, and delivering real-time analytics without scaling issues or high operational overhead.",
    "solution": "Built a loosely coupled, serverless event-driven architecture on AWS where IoT telemetry flows through Kinesis into a C# microservice, enriched via a Python AI sidecar, persisted in DynamoDB and S3, orchestrated with EventBridge and Step Functions, and analyzed through Redshift, Athena, and QuickSight dashboards.",
    "tech_stack": [
        "C#",
        "Python",
        "FastAPI",
        "AWS Lambda",
        "Amazon Kinesis",
        "Amazon DynamoDB",
        "Amazon EventBridge",
        "Amazon S3",
        "Amazon Redshift",
        "Amazon Athena",
        "Amazon QuickSight",
        "Amazon SageMaker",
        "Amazon ECS",
        "Amazon CloudWatch",
        "AWS IAM",
        "AWS Step Functions"
    ],
    "overview": {
        "architecture": {
            "styles": [
                "Event-Driven",
                "Serverless",
                "Microservices"
            ],
            "key_components": [
                "IoT ingestion via API Gateway and Kinesis",
                "C# microservice with KCL for stream processing",
                "Python AI sidecar for ML enrichment",
                "DynamoDB for filtered operational data",
                "S3 and Firehose for batch analytics",
                "EventBridge for orchestration and business workflows",
                "Analytics via Redshift, Athena, QuickSight"
            ]
        },
        "design_patterns": [
            "Sidecar pattern",
            "Event sourcing",
            "CQRS (Command Query Responsibility Segregation)",
            "Pub/Sub with decoupled services"
        ]
    },
    "architecture": {
        "style": "Serverless Event-Driven Microservices",
        "key_components": [
            "API Gateway",
            "IoT Core",
            "Kinesis Data Streams",
            "ECS-hosted C# Microservice",
            "Python ML Sidecar",
            "DynamoDB",
            "EventBridge",
            "S3",
            "Athena",
            "Redshift",
            "QuickSight",
            "Step Functions"
        ],
        "diagram_url": "https://example.com/contoso-energy-architecture.png"
    },
    "challenges": [
        "Scaling ingestion for millions of telemetry events per hour",
        "Ensuring low-latency enrichment without blocking processing",
        "Maintaining cost efficiency while handling peak loads",
        "Securing cross-service communication in a multi-tenant environment"
    ],
    "impact": {
        "metrics": {
            "processing_time_reduction": "40% faster compared to legacy batch system",
            "cost_savings": "30% lower infrastructure cost due to serverless adoption",
            "transactions_processed": "Over 5 million telemetry events daily"
        },
        "business_outcome": "Enabled real-time monitoring of energy usage and predictive insights, improving customer transparency and grid efficiency."
    },
    "links": {
        "github": "https://github.com/your-username/portfolio-serverless-event-architecture-python-aws",
        "demo": "https://demo.contoso-energy.com",
        "docs": "https://docs.contoso-energy.com"
    },
    "media": [
        {
            "type": "image",
            "url": "https://example.com/screenshots/dashboard.png",
            "caption": "Real-time energy dashboard powered by QuickSight and Grafana"
        },
        {
            "type": "diagram",
            "url": "https://example.com/contoso-energy-architecture.png",
            "caption": "Enterprise AWS serverless architecture"
        }
    ],
    "timeline": {
        "start": "2024-02",
        "end": "2024-06"
    },
    "tags": [
        {
            "name": "AI",
            "summary": "Artificial intelligence applied to telemetry.",
            "problem": "Raw telemetry lacks contextual insights.",
            "solution": "Apply ML models for anomaly detection and enrichment.",
            "children": [
                {
                    "name": "ML",
                    "summary": "Machine learning models running in a sidecar.",
                    "problem": "Need near real-time enrichment for telemetry data.",
                    "solution": "Run lightweight models in Python sidecar via shared memory.",
                    "children": [
                        {
                            "name": "AI ML Sidecar",
                            "summary": "Sidecar enrichment microservice.",
                            "problem": "C# service cannot handle ML workloads efficiently.",
                            "solution": "Offload ML to colocated Python container with fast IPC."
                        }
                    ]
                }
            ]
        },
        {
            "name": "AWS",
            "summary": "Cloud services backbone powering serverless workflows.",
            "children": [
                {
                    "name": "Kinesis",
                    "summary": "Streaming ingestion pipeline for IoT telemetry.",
                    "problem": "High-throughput ingestion of distributed device events.",
                    "solution": "Use Amazon Kinesis for scalable, ordered event streams."
                },
                {
                    "name": "DynamoDB",
                    "summary": "Operational data store for telemetry state.",
                    "problem": "Telemetry needs low-latency operational storage.",
                    "solution": "Store structured operational data in DynamoDB."
                },
                {
                    "name": "S3",
                    "summary": "Cost-effective storage for batch and analytical data."
                },
                {
                    "name": "EventBridge",
                    "summary": "Event bus for orchestration and workflows."
                },
                {
                    "name": "Step Functions",
                    "summary": "Serverless orchestrator for business processes."
                },
                {
                    "name": "Athena",
                    "summary": "Ad-hoc query service over data lake."
                },
                {
                    "name": "Redshift",
                    "summary": "Cloud data warehouse for analytics."
                },
                {
                    "name": "QuickSight",
                    "summary": "Visualization and dashboarding for telemetry insights."
                }
            ]
        },
        {
            "name": "Architecture",
            "summary": "Patterns and practices ensuring resilience and scalability.",
            "children": [
                {
                    "name": "Serverless",
                    "summary": "Pay-per-use execution model without server management."
                },
                {
                    "name": "Event-Driven",
                    "summary": "Loosely coupled systems via asynchronous events."
                },
                {
                    "name": "Microservices",
                    "summary": "Small, focused services that can scale independently."
                }
            ]
        },
        {
            "name": "Languages",
            "summary": "Core programming languages used in the solution.",
            "children": [
                {
                    "name": "C#",
                    "summary": "Primary service language for business logic."
                },
                {
                    "name": "Python",
                    "summary": "ML sidecar and orchestration tasks."
                }
            ]
        }
    ],
    "flow": {
        "steps": [
            {
                "id": "1",
                "type": "ingest",
                "name": "Telemetry Ingestion",
                "action": "Collect IoT telemetry via API Gateway into Kinesis"
            },
            {
                "id": "2",
                "type": "process",
                "name": "Stream Processing",
                "action": "C# microservice consumes events with KCL and applies business rules",
                "depends_on": [
                    "1"
                ],
                "retries": 3,
                "timeout_sec": 30
            },
            {
                "id": "3",
                "type": "enrich",
                "name": "AI Enrichment",
                "action": "Python sidecar performs ML-based enrichment on telemetry data",
                "depends_on": [
                    "2"
                ]
            },
            {
                "id": "4",
                "type": "persist",
                "name": "Data Persistence",
                "action": "Store operational data in DynamoDB and analytical data in S3",
                "depends_on": [
                    "2",
                    "3"
                ]
            },
            {
                "id": "5",
                "type": "orchestrate",
                "name": "Event Orchestration",
                "action": "EventBridge triggers workflows via Step Functions, SQS, and SNS",
                "depends_on": [
                    "4"
                ]
            },
            {
                "id": "6",
                "type": "analyze",
                "name": "Analytics & Dashboards",
                "action": "Athena and Redshift queries feed QuickSight/Grafana dashboards",
                "depends_on": [
                    "4",
                    "5"
                ]
            }
        ]
    }
}